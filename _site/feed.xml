<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-07-26T13:27:46-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Tyler’s Blog</title><subtitle>Welcome! | Tyler's Blog</subtitle><author><name>Tyler Burleyson</name><email>tjb152@case.edu</email></author><entry><title type="html">What I’m Reading this Week, Vol. 2</title><link href="http://localhost:4000/readings/2020/07/26/readings2.html" rel="alternate" type="text/html" title="What I'm Reading this Week, Vol. 2" /><published>2020-07-26T00:00:00-04:00</published><updated>2020-07-26T00:00:00-04:00</updated><id>http://localhost:4000/readings/2020/07/26/readings2</id><content type="html" xml:base="http://localhost:4000/readings/2020/07/26/readings2.html">&lt;h2 id=&quot;similarly-quick-forward&quot;&gt;(Similarly Quick) Forward&lt;/h2&gt;
&lt;p&gt;I set out to write a post like this every Friday, so of course the second week
in I had a massive influx of work topped by about 6 hours in Zoom meetings. Oh
well! One of the perks of a personal project is that it’s totally under my
control: convenient when other responsibilities get in the way.&lt;/p&gt;

&lt;p&gt;To try to make up for the short delay, I’m going to challenge myself to write
about one of my favorite “Cool Math Things” this week, the Cantor Set. Variety
is the spice of life and blogs and all that.&lt;/p&gt;

&lt;h3 id=&quot;vaccines-stop-diseases-safely---why-all-the-suspicion&quot;&gt;Vaccines stop diseases safely - why all the suspicion?&lt;/h3&gt;
&lt;h4 id=&quot;joan-donovan&quot;&gt;Joan Donovan&lt;/h4&gt;

&lt;p&gt;The &lt;em&gt;Nature&lt;/em&gt; newsletter is a great source for quick science readings, and for
the past few months, of coronavirus updates from scientists (rather than
journalists and politicians). This piece is a review of a book by Heidi Larson,
&lt;em&gt;Stuck: How Vaccine Rumours start - And Why They Don’t Go Away&lt;/em&gt;. The problem of
vaccine rejection is a multidisciplinary, community one. Since a vaccine isn’t
just for yourself, but has important ramifications for the health of all those
around you, public officials have a vested interest in collective vaccination.
The observation that having a choice to vaccinate is a matter of not only
information and disinformation, but of liberty and dignity, is an excellent
nuance on a “debate” that is often the product of inflammatory Facebook posts.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Vaccine hesitancy is a problem of dignity as much as of the abundance of
falsehoods: individuals want to have their choices respected, amid growing
distrust in authority.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The role that social media plays is fascinating as well. Social media and the
internet are both incredibly liberating in that they empower the individual to
reach large numbers of people, while allowing users to get content from other
users. But, in the opposite vein, social media pushes groupthink in the way that
posts are selected to be viewed by algorithms based on popularity. Tack on the
particular gimmick of each site (brevity on Twitter, images or video on
Instagram, and group associations on Facebook) and each gets their own way to
game the system in interesting and potentially harmful ways.&lt;/p&gt;

&lt;p&gt;Read the article &lt;a href=&quot;https://www.nature.com/articles/d41586-020-02192-w?utm_source=Nature+Briefing&amp;amp;utm_campaign=a0e80cbbed-briefing-dy-20200724&amp;amp;utm_medium=email&amp;amp;utm_term=0_c9dfd39373-a0e80cbbed-44568457&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;how-capitalism-drives-cancel-culture&quot;&gt;How Capitalism Drives Cancel Culture&lt;/h3&gt;
&lt;h4 id=&quot;helen-lewis&quot;&gt;Helen Lewis&lt;/h4&gt;

&lt;p&gt;Moving past the clickbait-y title for a moment, this article gives a compelling
explanation of some of the trends which make up “cancel culture”. Lewis’s “Iron
Law of Woke Capitalism”, that “Brands will gravitate toward low-cost, high-noise
signals as a substitute for genuine reform, to ensure their survival” definitely
appeases the cynic inside all of us. It explains the football team in Washington
and the various brands with new, all-black or rainbow logos. While I am a big
believer in the fact that language matters - how we communicate impacts
ourselves in others - it’s hard not to roll your eyes at a lot of what is done
to catch consumer’s attention. I also appreciated her assessment of the
popularity of &lt;em&gt;White Fragility&lt;/em&gt; a book supposedly about racism which is, in
fact, a book about white people, for white people, written by a white women.
John McWhorter has a piece in &lt;em&gt;The Atlantic&lt;/em&gt; recently where he claims the book
condescends on people of color in the way it demands its readers walk on
eggshells around topics of racism and social injustice.&lt;/p&gt;

&lt;p&gt;The final section, where Lewis disambiguates economic and social radicalism, is
a wonderful dichotomy for analysing positions on racism. It reminds me of a
question I first encountered in Peggy McIntosh’s seminal essay, &lt;em&gt;White
Privilege: Unpacking the Invisible Knapsack&lt;/em&gt;: in order to create equality,
whether between genders or races or levels of ability, do the dominant groups
need to give up some of their power? There are some great conversations to be
had about what exactly constitutes “power” and “privilege”. While many of the
writers at &lt;em&gt;The Atlantic&lt;/em&gt; are progressives, I appreciate the level of nuance
given to contentious social debates like this one.&lt;/p&gt;

&lt;p&gt;Read the articles by &lt;a href=&quot;https://www.theatlantic.com/international/archive/2020/07/cancel-culture-and-problem-woke-capitalism/614086/&quot;&gt;Lewis&lt;/a&gt;, &lt;a href=&quot;https://www.theatlantic.com/ideas/archive/2020/07/dehumanizing-condescension-white-fragility/614146/&quot;&gt;McWhorter&lt;/a&gt;, and &lt;a href=&quot;https://www.racialequitytools.org/resourcefiles/mcintosh.pdf&quot;&gt;McIntosh&lt;/a&gt; at the links on their
names.&lt;/p&gt;

&lt;h3 id=&quot;something-completely-different-now-the-cantor-set&quot;&gt;Something completely different now: The Cantor Set&lt;/h3&gt;

&lt;p&gt;I promised I’d write a little something about one of my favorite math topics,
the Cantor Set. It’s a great example of one of objects of curiousity which I
love in math, namely, the concepts of finite and infinite and their interplay. I
first heard about the Cantor Set from my advisor, Dr. Peter Thomas, during an
office hours discussion. I’m going to walk through the construction of the
ternary set, then talk about some of its coolest properties.&lt;/p&gt;

&lt;p&gt;Imagine the real number line as you were first taught it in elementary school.
We have at the center the number zero, with all positive numbers in increasing
order on its right, and all negative numbers in decreasing order on its left.
There are are infinite amount of numbers in each direction. Imagine walking
along this line in either direction: you’d never stop walking. Alternatively,
imagine trying to write down every whole number: 0, 1, 2, 3, 4, 5, 6, …&lt;/p&gt;

&lt;p&gt;You’ll never finish.&lt;/p&gt;

&lt;p&gt;But, for now, we only care about the numbers between 0 and 1. That includes
numbers like 0.25 and 3/4, as well as numbers like half the square root of two
and pi over four. These are all equally valid real numbers who lay between 0 and
1 in value.&lt;/p&gt;

&lt;p&gt;What is the length of this interval, from 0 to 1? It’s a more complex question
than it may seem at first. Often, mathematicians define length as the difference
between the furthest apart points: 1 - 0 = 1. This is a sensible measurement
system. In the real world, you may say you’re six feet tall, because if you
stand next to a measuring tape, the difference between what it reads at the
bottom of your foot and its reading at the top of your head is six feet. We also
naturally talk about distance as ratios - you may say your commute is a 20
minute car ride, and getting to the park takes about half that time. Therefore,
your commute is twice as long as the trip to the park.&lt;/p&gt;

&lt;p&gt;What we will aim to do with the interval from 0 to 1 is use this concept of
ratios to try to ‘cut out’ all of the numbers in this interval. First, cut the
set into thirds. Let $p=[0,1]$, which is a notation for defining $p$ as the set
of all numbers between 0 and 1, including 0 and 1. Now, let $p_1 = [0,1/3)$,
$p_2 = (1/3, 2/3)$, and $p_3 = (2/3, 1]$ where the parentheses signify excluding
the endpoint.&lt;/p&gt;

&lt;p&gt;It is fairly obvious that $p_1 + p_2 + p_3 = p$, that is, if we consider all
three of these sets $p_i$ we get all of the points that are in $p$.&lt;/p&gt;

&lt;p&gt;Now, define a set $q = p_1 + p_3$. That is, $q$ is just $p=[0,1]$ without the
middle third. You would agree, of course, that this set is ‘smaller’ than our
original set $p$, since all of it’s numbers are in $p$ but not all of $p$ is in
$q$. This is a different notion of size than before – now we are interested in
how many things are in a set, rather than just the distance between its furthest
points. This is perhaps an even more natural way to think about things: we count
apples in a basket and say there are 10 apples, or see another basket with 5
pears and say there are more apples than pears, or even that there are twice as
many apples as there are pears in the baskets. We’ve simply moved to a more
abstract space, where we consider an infinite number of objects at a time. Here,
the objects are individual numbers, also called ‘points’ on the real number
line. Observe that while there is a clear ‘next step’ in counting discrete
objects in real life. If you have 5 apples, the smallest change you can make to
that quantity is to add or subtract exactly one apple. You can’t take away a
third of apple. However, that’s what we just did with our set of numbers between
0 and 1.&lt;/p&gt;

&lt;p&gt;Now, repeat this process of chopping out the middle there ad infinitum. So we go
from $[0,1/3) + (2/3, 1)$ to $[0,1/9) + (2/9,3/9) + (6/9,7/9) + (8/9,1]$, and so
on, so forth. How many numbers are left?&lt;/p&gt;

&lt;p&gt;Well, we certainly still have 0 and 1,, so we have at least two numbers. It can
also be shown that we have all numbers which can be expressed of the form $x =
c_1/3 + c_2/3^2 + … + c_n/3^n + …$, where $n$ is a natural number (the
naturals are all whole numbers 1 and above, the numbers which make sense to
count with) and where $c_i$ is either 0 or 2 for all $n$. Here’s an image from
Wolfram Mathworld:
&lt;img src=&quot;/assets/CantorSet_900.png&quot; alt=&quot;Cantor Set&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Without giving the detailed, analysis-based proofs, that statement above can be
shown as well as the fact that it describes an infinite amount of numbers
between 0 and 1. The difference between the largest and smallest elements in our
final set is still 1, but there are clearly much, much fewer points than started
with. Certainly, there are more points which were discarded than there are left.
Regardless, we have an infinite number of points remaining – just a “smaller”
infinity than those discarded. Of course, we also started with a “larger”
infinity of points than is either our final set or all of our discarded points.&lt;/p&gt;

&lt;p&gt;This, as it turns out, satisfies a quite a few set descriptions in mathematics.
The Cantor Set, as constructed above, is totaly disconnected, perfect, nowhere
dense, closed, compact, and of measure zero. Those of you with formal
mathematics training are smiling along knowingly, and for the rest of you, well,
none of that needs to be meaningful to appreciate the beauty of the set. How can
you take infinity away from infinity, and be left with infinity? How do we
quantify this set – how large is it, how long is it, how does it compare in
various ideas of size with other sets of objects?&lt;/p&gt;

&lt;p&gt;It’s interesting, as well, to think about jumping around between the points in
the set. What is the next biggest number after 0? Is it 1? No, because $0 &amp;lt; 1/2
&amp;lt; 1$. So is it $1/2$? No, because $0 &amp;lt; 1/4 &amp;lt; 1/2$. Continue ad infinitum, and
you begin to recognize a similarity with the construction of the Cantor Set.
Namely, there are no two points which are ‘next to each other’ in the final set,
since in the process of pruning down the set, we always remove the middle third
of any subinterval of points.&lt;/p&gt;

&lt;p&gt;In other words, if given a point in $[0,1]$, we could tell you whether or not it
is in the Cantor Set by seeing if it can be written with the series expansion
above, $x = c_1/3 + c_2/3^2 + …$. However, we could not then write down the
next largest number in the set. This describes infinity.&lt;/p&gt;

&lt;p&gt;There’s a ton of other cool stuff about the Cantor Set, like how the
construction we did (called the Cantor Ternary Set) describes all numbers
between 0 and 1 which can be written in ternary without using 1’s. However, what
I first found so fascinating about it is the ideas of infinity encapsulated
within. That fundamental idea of always being able to find a closer value, even
in a set which seems to be so small, is fascinating and beautiful.&lt;/p&gt;</content><author><name>Tyler Burleyson</name><email>tjb152@case.edu</email></author><summary type="html">(Similarly Quick) Forward I set out to write a post like this every Friday, so of course the second week in I had a massive influx of work topped by about 6 hours in Zoom meetings. Oh well! One of the perks of a personal project is that it’s totally under my control: convenient when other responsibilities get in the way.</summary></entry><entry><title type="html">What I’m Reading this Week, Vol. 1</title><link href="http://localhost:4000/readings/2020/07/17/readings.html" rel="alternate" type="text/html" title="What I'm Reading this Week, Vol. 1" /><published>2020-07-17T00:00:00-04:00</published><updated>2020-07-17T00:00:00-04:00</updated><id>http://localhost:4000/readings/2020/07/17/readings</id><content type="html" xml:base="http://localhost:4000/readings/2020/07/17/readings.html">&lt;h2 id=&quot;quick-forward&quot;&gt;Quick Forward&lt;/h2&gt;
&lt;p&gt;As part of a personal challenge to write and reflect more often, I’ve decided to
start sharing some of the more interesting articles and what-not I’ve read
recently. Revisiting all of these should ideally help me stew in the ideas more,
since it’s all too easy to read and move on. My high school chemistry teacher
used to talk about how learning anything requires multiple exposures – for her,
that was a justification for constant homework and quizzes, but then she was one
of our best science teachers. “Lifelong Learning” is a buzzword, but one I
believe in wholeheartedly.&lt;/p&gt;

&lt;p&gt;Without further ado, let’s get to it.&lt;/p&gt;

&lt;h3 id=&quot;whats-the-use-of-being-a-boy-an-interview-with-douglas-a-martin&quot;&gt;&lt;em&gt;What’s the Use of Being a Boy: An interview with Douglas A. Martin&lt;/em&gt;&lt;/h3&gt;
&lt;h4 id=&quot;by-spencer-quong&quot;&gt;By Spencer Quong&lt;/h4&gt;

&lt;p&gt;I first came across &lt;em&gt;the Paris Review&lt;/em&gt; from Sarah Kay’s Poetry Rx series of
posts. She was the convocation speaker my freshman year at Case, and I’ve been
loosely following what she writes since. When I was in middle school we had
about 3-4 authors visit each year, by some miracle work of our librarian. When I
was younger I always thought I’d be an author one day, whether that would be my
career or something I do after retirement. Reading the &lt;em&gt;Review&lt;/em&gt; has helped me
keep up those interests even as I pursue a STEM degree at an incredibly
pre-profesional school. But then, that’s another topic entirely.&lt;/p&gt;

&lt;p&gt;The author, Douglas Martin, is as thoroughly fascinating in this interview as
everyone with the stroke of practiced brilliance and dedication that any great
writer has. The impulse to write following being exposed to the news cycle
around the events which inspired to book is amazing to me - too often, I feel
stretched in response to encountering something impactful. It’s often easier to
lean away rather than into discomfort, but Martin describes doing exactly that.&lt;/p&gt;

&lt;p&gt;Perhaps as a product of being fortunate enough to encounter so many writers at a
young age, I love hearing about their process. Martin’s musings over giving his
characters names is wonderfully tasteful and high level. His ultimate decision
to prioritise relationships – “I want to look at some supposed roles within
these positions” – seems to, in some capacity, define the book. The
interviewer, Spencer Quong, dives into this further by asking about the use of
the word “boy” throughout the text. Given the current discourse I find myself in
surrounding what it means to be masculine, hearing this perspective of the
precursive condition of boyhood was elucidating and freeing.&lt;/p&gt;

&lt;p&gt;Read the article &lt;a href=&quot;https://www.theparisreview.org/blog/2020/07/14/whats-the-use-of-being-a-boy-an-interview-with-douglas-a-martin/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;the-partially-examined-life-ep-235-judith-butlers-gender-trouble&quot;&gt;The Partially Examined Life, ep. 235: Judith Butler’s &lt;em&gt;Gender Trouble&lt;/em&gt;&lt;/h3&gt;
&lt;h4 id=&quot;partially-examined-life-podcast&quot;&gt;Partially Examined Life Podcast&lt;/h4&gt;

&lt;p&gt;I first began listening to PEL some time in high school, when I had a much more
difficult time interpreting any of what they were saying. The podcast attempts
to make philosophy accessible to their listeners, but never compromising real
discussion of the material at hand. In other words, you don’t need a PhD in
Philosophy to follow, but some background and intentional listening is needed.&lt;/p&gt;

&lt;p&gt;I first encountered &lt;em&gt;Gender Trouble&lt;/em&gt; in a University Seminar class, &lt;em&gt;Many Ways
to be a Woman&lt;/em&gt;. That was my first real introduction to feminism outside of what
exists on Twitter, and it was incredibly eye-opening. My conception of many
ideas about equality were expanded and given new legs by that class. Nowadays, I
get frustrated by old friends who still make jokes about Gender Studies as
though it isn’t a legitimate, necessary field with a role to play in our
society. I’m begining to digress.&lt;/p&gt;

&lt;p&gt;I’ve relistened to this podcast a few times, gleaning more at each go-around.
The question of what structures we take for granted are socially constructed
(and what the heck that actually means) are endlessly fascinating and
informative. By rooting my understanding of what it means to be a man or a woman
or to identify as neither in philosophical soil, it has become entrenched in a
much more meaningful way. It isn’t just a matter of what you can and cannot say
or think, but of identifying the impact of your words or actions in the greater
context of our culture. While Butler is often criticized for failing to offer
concrete action of any kind, the podcast’s hosts argue that her seminal work is
often overinterpreted. It is not that Butler wouldn’t fight for women’s
suffrage, for example, but that she believes that is not enough to make
meaningful change in the face of the social constructions that define how we
interact with each other.&lt;/p&gt;

&lt;p&gt;Listen at the &lt;a href=&quot;https://partiallyexaminedlife.com/2020/02/03/ep235-1-butler-gender-trouble/&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;the-dark-power-of-fraternities-the-atlantic&quot;&gt;“The Dark Power of Fraternities”, &lt;em&gt;The Atlantic&lt;/em&gt;&lt;/h3&gt;
&lt;h4 id=&quot;by-caitlin-flanagan&quot;&gt;By Caitlin Flanagan&lt;/h4&gt;

&lt;p&gt;I’ve been leading a reading group within my fraternity this summer to read and
talk about social justice issues. There’s two parts to my motivation here:
firstly, to move beyond just talking about inequality and dig into some
writings; and secondly, to get the guys most interested in this sort of thing to
spend more time on it and get comfortable talking to each other about it.
Ideally, this will have a trickle-down effect in our chapter culture – if
there’s 10 guys who will feel empowered by their knowledge and previous
conversations to call out bad behavior or explain a concept to someone, that
betters our whole community.&lt;/p&gt;

&lt;p&gt;This article in particular is an absolutely amazing deep dive into the forces
and politics at play in Greek Life on college campuses. Some of what Flanagan
discusses, like the FIPG’s and the complicated web of insurance-related policies
that exist in the fraternity world, are realities we have grown too comfortable
with on our campus. An excellent quote from the article:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Are fraternities acting in an ethical manner, requiring good behavior and
punishing poor decisions? Or are they keeping a cool distance from the mayhem,
knowing full well that it occurs with regularity?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is especially vital reading for me as a member of my fraternity’s national
leadership. There is a great deal of work to be done for our members, but there
is also a great deal of awareness to be raised and actions to be taken for the
campus communities that greek chapters exist within.&lt;/p&gt;

&lt;p&gt;I’ve been dealing with a lot of personal reckonings lately, from my academic
and career aspirations to my myriad associations and personal beliefs which are
growing increasingly tenuous in our current world. I am growing increasingly
aware by the day of the breadth and depth of work necessary if I am to be the
kind of person I have always wanted and believed to be. It’s both a
nervewracking and exciting experience, as difficult as anything worth doing is.&lt;/p&gt;

&lt;p&gt;I strongly recommend reading this &lt;a href=&quot;https://www.theatlantic.com/magazine/archive/2014/03/the-dark-power-of-fraternities/357580/&quot;&gt;one&lt;/a&gt;.&lt;/p&gt;</content><author><name>Tyler Burleyson</name><email>tjb152@case.edu</email></author><summary type="html">Quick Forward As part of a personal challenge to write and reflect more often, I’ve decided to start sharing some of the more interesting articles and what-not I’ve read recently. Revisiting all of these should ideally help me stew in the ideas more, since it’s all too easy to read and move on. My high school chemistry teacher used to talk about how learning anything requires multiple exposures – for her, that was a justification for constant homework and quizzes, but then she was one of our best science teachers. “Lifelong Learning” is a buzzword, but one I believe in wholeheartedly.</summary></entry><entry><title type="html">Time Management Strategies - The Eisenhower Square</title><link href="http://localhost:4000/2020/06/16/time-management-square.html" rel="alternate" type="text/html" title="Time Management Strategies - The Eisenhower Square" /><published>2020-06-16T00:00:00-04:00</published><updated>2020-06-16T00:00:00-04:00</updated><id>http://localhost:4000/2020/06/16/time-management-square</id><content type="html" xml:base="http://localhost:4000/2020/06/16/time-management-square.html">&lt;p&gt;The below is an email I sent to my fraternity chapter last semester, during the
period where we fould ourselves stuck at home. I am the Director of Member
Development, in charge of programming related to ‘development’, in all the forms
that that takes, and a member of the executive board with the goal of forming a
cohesive, growth-oriented experience across the 4 years any of our members are
undergraduates. When the pandemic interrupted our plans for the semester, many
of us in leadership roles adapted as best we could. I felt this was an
interesting write-up on one of my favorite time management strategies. I include
most of the email body below. Enjoy!&lt;/p&gt;

&lt;h3 id=&quot;the-eisenhower-square&quot;&gt;The Eisenhower Square&lt;/h3&gt;
&lt;p&gt;This is a strategy I use whenever I feel like I’ve got a lot on my plate and
it’s going to be hard to prioritise and get it all done. 4 quick steps:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Write down everything you need to get done that you’re aware of
    &lt;ul&gt;
      &lt;li&gt;Homework, chores, things due in a month, test prep, etc.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Next to each item, indicate with a “U” if it’s Urgent
    &lt;ul&gt;
      &lt;li&gt;This depends on the size of the time. For example, a one page reflection is
 probably only urgent when it’s due in 24 hours, but studying for a midterm is
 probably urgent 5 days out.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Next to each item, indicate with an “I” if it’s Important
    &lt;ul&gt;
      &lt;li&gt;Is this meaningful to you? Does it help you achieve your goals or reflect
your values? Are there others counting on you to do this?&lt;/li&gt;
      &lt;li&gt;For example, MCAT review is definitely important, but daily reflections for
class may not be to you&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Next to each item, indicate with “RN” if it can be done Right Now
    &lt;ul&gt;
      &lt;li&gt;Would it take you five minutes or less?&lt;/li&gt;
      &lt;li&gt;For example, sending an email, writing up finished homework, washing your
face, etc.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once you’ve done that, fill out the square:
&lt;img src=&quot;/assets/eisenhower.png&quot; alt=&quot;eisenhower&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Right Now (RN)
    &lt;ul&gt;
      &lt;li&gt;Do this stuff right now! The &lt;strong&gt;quick win&lt;/strong&gt; of acomplishing something will prep
 you to succeed all day long&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Important and Urgent (IU)
    &lt;ul&gt;
      &lt;li&gt;This stuff should be your &lt;strong&gt;Top Priority&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Not Important, but Urgent (nIU)
    &lt;ul&gt;
      &lt;li&gt;Once the stuff above is done, evaluate these items. Can they be &lt;strong&gt;delegated&lt;/strong&gt;
 or &lt;strong&gt;postponed&lt;/strong&gt;?&lt;/li&gt;
      &lt;li&gt;If not, get them done now, too. If you get daily, small assignments for
 example, they’ll
 probably land here.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Important, but not Urgent (InU)
    &lt;ul&gt;
      &lt;li&gt;If you have extra time today, you might get to this stuff. But if not, don’t
 sweat it!&lt;/li&gt;
      &lt;li&gt;What’s most valuable is to &lt;strong&gt;set a schedule&lt;/strong&gt; for when you will get these
 things done. Keep in mind due dates and size of the task.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Not Important and Not Urgent (nInU)
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Re-evaluate&lt;/strong&gt; why this stuff made it on your list at all. Is there any value
 here?&lt;/li&gt;
      &lt;li&gt;Identify what value exists, and determine if this is something to &lt;strong&gt;scrap&lt;/strong&gt;,
 something to &lt;strong&gt;schedule&lt;/strong&gt;, or something to &lt;strong&gt;reconsider&lt;/strong&gt; in some other way.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here’s my list for today. Next to each item, I indicate with I/nI, U/nU, or RN
for right now.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Finish 422 Homework - I,U&lt;/li&gt;
  &lt;li&gt;Write up 422 - I,U&lt;/li&gt;
  &lt;li&gt;Home Reading for 422 - I,nU&lt;/li&gt;
  &lt;li&gt;read 319 Paper - I,nU&lt;/li&gt;
  &lt;li&gt;flesh out simulations 319 - nI,nU&lt;/li&gt;
  &lt;li&gt;practice email BAFI - Right Now&lt;/li&gt;
  &lt;li&gt;readings BAFI - I,U&lt;/li&gt;
  &lt;li&gt;send an email to the chapter - Right Now&lt;/li&gt;
  &lt;li&gt;wash towels - Right Now&lt;/li&gt;
  &lt;li&gt;clean bathroom - I,nU&lt;/li&gt;
  &lt;li&gt;watch discrete lecture - I,nU&lt;/li&gt;
  &lt;li&gt;watch MUTH lecture - nU,nI&lt;/li&gt;
  &lt;li&gt;Do my taxes - I,nU&lt;/li&gt;
  &lt;li&gt;clean desk - Right Now&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Tyler Burleyson</name><email>tjb152@case.edu</email></author><summary type="html">The below is an email I sent to my fraternity chapter last semester, during the period where we fould ourselves stuck at home. I am the Director of Member Development, in charge of programming related to ‘development’, in all the forms that that takes, and a member of the executive board with the goal of forming a cohesive, growth-oriented experience across the 4 years any of our members are undergraduates. When the pandemic interrupted our plans for the semester, many of us in leadership roles adapted as best we could. I felt this was an interesting write-up on one of my favorite time management strategies. I include most of the email body below. Enjoy!</summary></entry><entry><title type="html">Translating the Gillespie Algorithm from Python to OCaml, pt. 2</title><link href="http://localhost:4000/python/ocaml/coding/2020/05/14/learning-ocaml.html" rel="alternate" type="text/html" title="Translating the Gillespie Algorithm from Python to OCaml, pt. 2" /><published>2020-05-14T00:00:00-04:00</published><updated>2020-05-14T00:00:00-04:00</updated><id>http://localhost:4000/python/ocaml/coding/2020/05/14/learning-ocaml</id><content type="html" xml:base="http://localhost:4000/python/ocaml/coding/2020/05/14/learning-ocaml.html">&lt;h2 id=&quot;learning-ocaml&quot;&gt;Learning OCaml&lt;/h2&gt;
&lt;p&gt;Believe it or not, translating code between languages with entirely different
paradigms is easier said than done. That goes doubly so when adapting to an
entirely new one, as is my case with OCaml. Regardless, I’ve had a fun time
learning the basics of the language. It was hard at first to come to terms with
the “let… in” syntax, but as I read more of the theory behind OCaml and
functional programming in general, I began to appreciate the elegance of the
approach.&lt;/p&gt;

&lt;p&gt;That process started on OCaml’s &lt;a href=&quot;(https://ocaml.org/learn/)&quot;&gt;website&lt;/a&gt;, which has some of the better intro
tutorials I’ve read (though that may just be a byproduct of my increasing
comfort with reading and writing code). I also liked the guide on
&lt;a href=&quot;(https://learnxinyminutes.com/docs/ocaml/)&quot;&gt;learnxinyminutes&lt;/a&gt; for quicker reference material. That was where I first heard
mention of the Hindley-Milner algorithm that OCaml uses for typing. The
&lt;a href=&quot;(https://en.wikipedia.org/wiki/Hindley%E2%80%93Milner_type_system)&quot;&gt;Wikipedia page&lt;/a&gt; on that is remarkably clear in its description of the problems
typing systems attempt to address, the aims of type inference, and the HM type
system as a whole.&lt;/p&gt;

&lt;h3 id=&quot;the-naive-approach&quot;&gt;The Naive Approach&lt;/h3&gt;
&lt;p&gt;The tools familiar to me (easily mutable variables, while loops, and vector
operations with NumPy) sort of, kind of exist in OCaml, but are not the
preferred way to do things.
For example, recursion and loops: the tutorials linked above refer to loops as ‘second
class citizens’ in OCaml, with relatively weak implementation and a number of
caveats. The naive approach would be to directly recreate each part of the
python script in OCaml, references and while loops alike. However, this might be
trickier than just trying to implement the algorithm in a more “OCaml-y” way,
using recursion and avoiding updating an array at each step.&lt;/p&gt;

&lt;h3 id=&quot;what-functions-do-we-need&quot;&gt;What functions do we need?&lt;/h3&gt;
&lt;p&gt;There’s a few basic elements of the Gillespie algorithm:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Calculate hazard functions to describe the probability of each reaction in
the system. Also, add these to get a total hazard (the chance at any moment
for any reaction to occur). Parameters include constants and the count of
each reactant.&lt;/li&gt;
  &lt;li&gt;Draw a wait time. This uses the total hazard as a parameter, and requires a
uniform distribution draw, which should be accomplishable with base.Stats in
OCaml.&lt;/li&gt;
  &lt;li&gt;Choose a reaction. This takes as a parameter a probability vector with
entries being the hazards of each reaction. It makes use of a multinomial
distribution, and outputs an integer array. In this case, we only need to
choose one reaction, so we don’t really need the array, but that’s what the
function returns.&lt;/li&gt;
  &lt;li&gt;Execute the reaction. Using Python, this step is just adjusting the variables
for each reactant’s counts. In OCaml, an implementation using a while loop
should probably do the same. However, the recursive version would likely pass
the updated reactant counts back into the function.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;On a side note: this represents a departure from the planning stage when I first
implemented the algorithm in Python. There, I first determined what parameters
needed to be set for the entire function; then I initialized all the necessary
variables; then I set up the while loop; and finally, I printed the results and
(optionally) generated the plot. Doing all of that in one function body is
intuitive at this point to me, but not at all how OCaml does things. Instead of
building the program top-down, so to speak, I’m instead building it bottom-up:
asking myself, what are the most basic operations needed? How do these fit
together? What operations are codependent, passing or requiring each other’s
outputs? And so on and so forth.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;c&quot;&gt;(*Generate Hazards*)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;k1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;k2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;htot&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
&lt;span class=&quot;c&quot;&gt;(*Draw Wait Time*)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t_wait&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;htot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;htot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Stats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniform_rvs&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;(*Choose a Reaction*)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rxn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Stats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniform_rvs&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;htot&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;tail-recursion&quot;&gt;Tail Recursion&lt;/h3&gt;
&lt;p&gt;The issue with recursion (as I was taught) was its memory expense. Adding
all those function calls to the stack quickly grows, since each must be
‘collapsed down’, so to speak, at the end in order to get your result. Luckily,
OCaml uses compiler magic to avoid this issue. This requires using tail
recursion – where the last call in a recursive function is to the function.
This can be less obvious than it seems. To borrow an example directly from the
OCaml tutorials:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While the recursive call is in the last line, it isn’t the last operation
completed:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;(a+1)&lt;/li&gt;
  &lt;li&gt;range (a+1) b&lt;/li&gt;
  &lt;li&gt;a :: range (a+1) b&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This results in the typical recursion memory issue. tail recursion is of the
following form:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;(*loop contents*)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The compiler basically turns that syntax into a while loop. There’s a great
Computerphile video about tail recursion on &lt;a href=&quot;(https://www.youtube.com/watch?v=_JtPhF8MshA)&quot;&gt;YouTube&lt;/a&gt;, if you’re interested.&lt;/p&gt;

&lt;h2 id=&quot;part-2-conclusion&quot;&gt;Part 2 Conclusion&lt;/h2&gt;
&lt;p&gt;This was an especially hard post to write, in particular because I wanted to get
my info right and relevant to what the final product will be. This isn’t meant
to be so much a tutorial as a dive into my thought process in my first attempt
at functional programming. Part 3, which’ll include and analyze some final code,
will come soon!&lt;/p&gt;</content><author><name>Tyler Burleyson</name><email>tjb152@case.edu</email></author><summary type="html">Believe it or not, translating code between paradigms is easier said than done.</summary></entry><entry><title type="html">Translating the Gillespie Algorithm from Python to Ocaml, pt. 1</title><link href="http://localhost:4000/python/ocaml/coding/2020/05/13/OCAML-Gillespie-alg.html" rel="alternate" type="text/html" title="Translating the Gillespie Algorithm from Python to Ocaml, pt. 1" /><published>2020-05-13T00:00:00-04:00</published><updated>2020-05-13T00:00:00-04:00</updated><id>http://localhost:4000/python/ocaml/coding/2020/05/13/OCAML-Gillespie-alg</id><content type="html" xml:base="http://localhost:4000/python/ocaml/coding/2020/05/13/OCAML-Gillespie-alg.html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This semester, I took a class called “Applied Probability and Stochastic
Processes for Biology”, which is cross-listed across seven departments. The
class was a mixture of undergrads and graduate students. That’s always a fun
time – graduate students tend to be less shy about asking questions than
undergrads, and in a class as interdisciplinary as this one, I doubt anyone but
the professor came in with all of the helpful background.&lt;/p&gt;

&lt;p&gt;Anyways, one of the departments this class was listed under was Electrical
Engineering and Computer Science, largely because of its emphasis on numerical
simulation tools. The most elementary of these is the &lt;a href=&quot;https://doi.org/10.1021/j100540a008&quot;&gt;Gillespie Algorithm&lt;/a&gt;,
introduced by Daniel Gillespie in his 1977 paper &lt;em&gt;Exact Stochastic Simulation of
Coupled Chemical Reactions&lt;/em&gt;. The basic idea is this:&lt;/p&gt;

&lt;p&gt;Chemical reactions occur when the right combination of molecules bump into each
other in the correct orientation with sufficient speed. If we had an incredibly
powerful computer, we could simulate the exact movements, orientations, and
speeds of all the molecules in an area and get an exact, deterministic
simulation of the system. This, however, is unfeasible for a system of any level
of complexity. Instead, the most common approach is to approximate these
reactions by simplifying our simulation.&lt;/p&gt;

&lt;p&gt;For very, very large systems, we don’t care very much about the individual
reactions occuring at any point in time. Instead we care about the general rate
at which the system reacts and the overall time it takes to complete. If you’ve
taken introductory chemistry or differential equations, you may be familiar with
rate laws used to describe reactions in such large systems. As an overview, 
consider a reaction $aA + bB \rightarrow P$, where $P$ is a stand-in for 
reaction products. The rate law is
$rate = k[A]^x[B]^y$, where $x$ and $y$ are the order with respect to
species A and B, respectively. The order is experimentally determined, and can
be an integer or a non-integer depending on the complexity of the system.
Chemical kinetics are a complex field – there’s a nice overview at
&lt;a href=&quot;https://chem.libretexts.org/Bookshelves/Physical_and_Theoretical_Chemistry_Textbook_Maps/Supplemental_Modules_(Physical_and_Theoretical_Chemistry)/Kinetics/Rate_Laws/The_Rate_Law/Reaction_Order&quot;&gt;libretexts&lt;/a&gt;. The rate law becomes a system of coupled differential equations
that look something like&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{gather*}
    \frac{dA}{dt} = f_A(A,B) \\
    \frac{dB}{dt} = f_B(A,B)
\end{gather*}&lt;/script&gt;

&lt;p&gt;As Gillespie notes in the abstract of his paper, this is not as physically
meaningful as a stochastic formulation, where individual reactions are tracked
and occur with randomly distributed rates. To make this formulation tractable, 
Gillespie provides a wonderful, relatively simple to follow derivation of his
algorithm in the paper linked above. I’ll skip over the fine details and present
you with the Wikipedia version:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Initialise the number of species, the total time to run the simulation,
and your random number generator (if need be).&lt;/li&gt;
  &lt;li&gt;For each reaction, compute a time interval and choose a reaction. This is
done based upon the hazard functions of the individual reactions, which
are similar to their rate laws (though not exactly the same).&lt;/li&gt;
  &lt;li&gt;Update the species counts and the time.&lt;/li&gt;
  &lt;li&gt;Repeat until the time allotted runs out or no reactions are possible (go back
to step 2).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The algorithm is exact and stochastic in that it draws a time between reactions
and a specific reaction from a probability distribution based on the hazard
functions, which describe how likely an individual reaction is to occur. 
While expensive, this was a major step forward in stochastic
simulations of such systems. It can be used to approximate any system which
resembles chemical reactions – in class, we used it to represent population
dynamics like Lotka-Volterra, and epidemic models like the SIR model, for
example.&lt;/p&gt;

&lt;h2 id=&quot;python-implementation&quot;&gt;Python Implementation&lt;/h2&gt;

&lt;p&gt;The best way to understand the algorithm is to see an implementation. Let’s
consider a simple dimerisation, where two species react to form a dimer which
can decompose back into the species.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{gather}
    A + B \xrightarrow{h_1} C \\
    C \xrightarrow{h_2} A + B
\end{gather}&lt;/script&gt;

&lt;p&gt;Where $h_1 = k_1 A B$ and $h_2 = k_2 C$ are the hazard functions of their
respective reactions. I’ve implemented the algorithm in Python as a
demonstration:
&lt;a href=&quot;/assets/gillespie_example.py&quot;&gt;python code&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uniform&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;gillespie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N_c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# N_i are the initial counts of A, B, and C
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# T is the toal time to run the simulation
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;#k1 and k2 are the hazard constants
&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Initialisations
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N_a&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N_b&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N_c&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;particles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# array captures system state at time t as tuple
&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Iterations
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Calculate hazards
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;h2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;htotal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h2&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Draw wait time
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uniform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;t_wait&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;htotal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Choose reaction
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;pvec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;htotal&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# normalised probability vector
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;rxn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;binomial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pvec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rxn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rxn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Iterate counters
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t_wait&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;particles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;particles&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So here’s the idea: while I spend the month of May waiting to begin my summer
plans, I thought it would be fun to learn some OCaml. OCaml is a general purpose
programming language with a nice type system which helps prevent errors and
makes code ‘safer’ in that it can be quickly written with fewer errors. A lot of
big companies including Facebook and Citrix use it, as well as financial groups
like Bloomberg and Jane Street. I looked at some tutorials on the language a few
weeks back, and was struck by how odd looking it was compared to what I’m used
to working in. Since the Gillespie algorithm is fresh in my head, I thought it
would be a more fun place to start than the typical searching-and-sorting fare.
So this will be the first in a series of blog posts, as I learn more about
OCaml, try to translate that on here, and then begin to implement some of my
past Python projects from Stochastics class into OCaml. Stay tuned!&lt;/p&gt;</content><author><name>Tyler Burleyson</name><email>tjb152@case.edu</email></author><summary type="html">First, let's explain the algorithm and implementing it in Python.</summary></entry><entry><title type="html">Theming KDE</title><link href="http://localhost:4000/workflow/2020/04/26/theming-KDE.html" rel="alternate" type="text/html" title="Theming KDE" /><published>2020-04-26T00:00:00-04:00</published><updated>2020-04-26T00:00:00-04:00</updated><id>http://localhost:4000/workflow/2020/04/26/theming-KDE</id><content type="html" xml:base="http://localhost:4000/workflow/2020/04/26/theming-KDE.html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I was about 13 when I built my first PC with a combination of savings,
birthday and christmas money, and help from a copious number of Youtube
tutorials. I still remember my panic when the internet didn’t immediately work, and
I had to run out to TigerDirect to buy a WiFi adapter (whoops!). Since then I’ve
built about a dozen or so systems for family and friends, and found out I
wasn’t alone - it seems to be a common beginner mistake to assume once you have
all the parts put together, the machine should just work like a prebuilt.&lt;/p&gt;

&lt;p&gt;The other side of this is the $100 cost for a Windows installation disk. Turns
out there’s no better way to turn a 13 year old into a Linux user than to ask
him for even more money after he’s made the biggest purchase of his life. While
I eventually turned over the Microsoft tax (since Linux gaming support wasn’t exactly
the best in 2013), I spent several weeks on Ubuntu 16.04 LTS, with the Gnome
desktop environment.&lt;/p&gt;

&lt;p&gt;This first foray into Linux and FOSS was pretty huge for me. While I didn’t
understand what I was doing then, using the command line to install drivers and
solving my own problems (while creating a good amount too!) was magical to me.
When I left for college and got my first laptop, I immediately dual-booted it
with Ubuntu 18.04 and Gnome.&lt;/p&gt;

&lt;p&gt;This worked great for a while, and I steadily used Windows 10 less and less as I
got more used to the configurability and ease of use of Ubuntu and gnome. When I
started doing data science research with the Solar Durability and Lifetime
Extension center on campus, being familiar with Linux was a huge bonus. All of
the graduate students and PI’s used Ubuntu and KDE, and the Raspberry Pi’s we
primarily used to connect to the University’s HPC were configured with Raspbian.&lt;/p&gt;

&lt;p&gt;My laptop had a touchscreen, so I thought I was smart to be using Gnome with
its larger UI and (in my mind) more elegant design compared to the slow,
cluttered KDE environments I used on the HPC. But a friend of mine in the lab
showed me his XFCE setup and how deeply customized he had made it. It was around
this time that I switched to Manjaro just for the sake of more frequent updates
and better driver support on my Razer Blade Stealth, and I decided to make the
jump to KDE as well.&lt;/p&gt;

&lt;h2 id=&quot;the-setup&quot;&gt;The Setup&lt;/h2&gt;
&lt;h3 id=&quot;global-themeplasma-style&quot;&gt;Global Theme/Plasma Style&lt;/h3&gt;
&lt;p&gt;I use &lt;a href=&quot;https://draculatheme.com/&quot;&gt;Dracula&lt;/a&gt; as my global theme. It’s a fantastic dark color scheme, with a
lot of nice purples and greens, but perhaps most importantly, it exists for a
ton of applications. The dracula theme is consistent across my desktop
environment, my firefox top bar, my vim and konsole colors, etc. For the global
theme, I opened system settings -&amp;gt; Appearance -&amp;gt; Global Themes -&amp;gt; Get New Global
Themes.. and searched for it. I use it for my window decorations and Plasma
style as well, both in the Appearance tab as well in KDE’s system settings.
&lt;img src=&quot;/assets/Screenshot_20200426_175508.png&quot; alt=&quot;global theme&quot; /&gt;
I’ve also tried out &lt;a href=&quot;https://github.com/EliverLara/Nordic&quot;&gt;Nordic&lt;/a&gt;, which is a gorgeous, more matte option. I prefer
Dracula, but I have no qualms recommending that one as well.&lt;/p&gt;

&lt;h3 id=&quot;icons&quot;&gt;Icons&lt;/h3&gt;
&lt;p&gt;For Icons, I use &lt;a href=&quot;https://github.com/vinceliuice/Tela-icon-theme&quot;&gt;Tela&lt;/a&gt;. I really like how well the colors here pair with
Dracula. You can follow the link to the github for installation instructions,
but I just went from system settings -&amp;gt; Icons -&amp;gt; Get New Icons… since that was
easy.&lt;/p&gt;

&lt;h3 id=&quot;other-fun-stuff&quot;&gt;Other Fun Stuff&lt;/h3&gt;
&lt;p&gt;I love using virtual desktops to keep some semblance of order between my various
assignments and classes throughout the day. Often I’ll have 4 desktops: one for
editing assignments and reading them from Canvas, one for textbook PDF’s and
other reference material, one for reserve/putting other classwork out of mind,
and one for Spotify and whatever else is running in the background. I already
use hotkeys to open applications and for whatever is running, so having keys to
switch between desktops can get tricky. I much prefer the MacOS approach of
having decent touchpad support, but this isn’t built into KDE/Manjaro.&lt;/p&gt;

&lt;p&gt;I use &lt;a href=&quot;https://github.com/bulletmark/libinput-gestures&quot;&gt;libinput-gestures&lt;/a&gt; for this. Simply put, it lets you configure your
touchpad to recognize gesture inputs however you’d like. I followed it’s install
guide to a T, installing the library from the AUR. I just use the defaults to
3-finger swipe between virtual desktops, but there’s a ton of config options
detailed on the github.&lt;/p&gt;

&lt;p&gt;On the desktop, I use &lt;a href=&quot;https://github.com/KDE/latte-dock&quot;&gt;latte-dock&lt;/a&gt;, and specifically the Plasma layout. I’ve
tried it at the top and bottom, and prefer having as small a GUI as possible to
help me focus on whatever I’m working on. The bar is the least intrusive, most
intuitive metaphor for me, since I often find using pop-up panels gets annoying
when mousing around the screen. YMMV, of course.&lt;/p&gt;

&lt;h4 id=&quot;command-line-goodies&quot;&gt;Command Line Goodies&lt;/h4&gt;
&lt;p&gt;I really, really love the aesthetic and convenience of [yakuake]. It comes by
default on Manjaro KDE and makes interacting with the command line super easy. I
use Ctrl + Tab to bring it up, and F12 to fullscreen it (both set in System
Settings -&amp;gt; Shortcuts). If I’m coding alongside a tutorial or something like
that, I’ll split screen with Konsole, but usually I prefer the drop-down.&lt;/p&gt;

&lt;p&gt;Within the console, I use &lt;a href=&quot;https://github.com/tmux/tmux&quot;&gt;tmux&lt;/a&gt; to organize my workspace. Tmux is a terminal
multiplexer, which basically lets you interact with multiple instances of the
command line in one window. I might use 10% of its capabilities – it’s a hugely
useful app – but I can’t get by without it now. Ham Vocke has an awesome intro
to it on &lt;a href=&quot;https://www.hamvocke.com/blog/a-quick-and-easy-guide-to-tmux/&quot;&gt;his website&lt;/a&gt; detailing how useful it is to him as a full-time
programmer. I’d strongly suggest that post and his follow-ups as an intro to
using the app. Here’s a link to my current config file, which is largely poached
from various Reddit users and public github repos: 
&lt;a href=&quot;/assets/tmux.conf&quot;&gt;.tmux.conf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Within the command line, I replaced my prompt with &lt;a href=&quot;https://starship.rs/&quot;&gt;starship.rs&lt;/a&gt;, which is
wonderfully customizable. It lets me customize what the prompt looks like and
what information is included with it each time a command runs. I use it to
remind me what virtual environment I might be on, what git branch I’m on and
whether it’s updated remotely, and get rough timings of commands.
&lt;img src=&quot;/assets/Screenshot_20200426_182710.png&quot; alt=&quot;tmux and starship&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And here’s a link to my configuration file: &lt;a href=&quot;/assets/starship.toml&quot;&gt;config&lt;/a&gt; I
only use a small portion of the languages it can recognize. Checkout the
website for more!&lt;/p&gt;

&lt;p&gt;Lastly, it’s worth mentioning that I’ve themed out my Vim, Konsole, Firefox, and
tmux with the &lt;a href=&quot;https://draculatheme.com/&quot;&gt;Dracula&lt;/a&gt; theme. Check out their documentation for installation of
each of these. Unfortunately, since the theme supports so many platforms, the
documentation is very general and I found myself going through a fair amount of
stackoverflow threads looking for small fixes (including spending about 20
minutes looking for a hidden file! fun times all around). Joking aside, I’ll
link my .bashrc and .vimrc below for your utility/amusement:
&lt;a href=&quot;/assets/bashrc&quot;&gt;.bashrc&lt;/a&gt;
&lt;a href=&quot;/assets/vimrc&quot;&gt;.vimrc&lt;/a&gt;&lt;/p&gt;</content><author><name>Tyler Burleyson</name><email>tjb152@case.edu</email></author><summary type="html">I was about 13 when I built my first PC...</summary></entry><entry><title type="html">My Jekyll Setup</title><link href="http://localhost:4000/website/2020/04/25/my-jekyll-setup.html" rel="alternate" type="text/html" title="My Jekyll Setup" /><published>2020-04-25T00:00:00-04:00</published><updated>2020-04-25T00:00:00-04:00</updated><id>http://localhost:4000/website/2020/04/25/my-jekyll-setup</id><content type="html" xml:base="http://localhost:4000/website/2020/04/25/my-jekyll-setup.html">&lt;p&gt;A friend of mine introduced me to &lt;a href=&quot;https://github.io/&quot;&gt;github.io&lt;/a&gt; a few back and showed me some of
the personal projects he has on his blog.
My curiosity was piqued, so I set up a github repo, added a “hello, world!” 
html file, and… left it at that for about 6 months.
Now that I’m quarantined at home with nothing to do except study for finals,
I figured it’s the perfect time to figure this all out.&lt;/p&gt;

&lt;p&gt;A quick note: this isn’t meant to be a full tutorial (for that, see the official
documentation linked further down!) but hopefully an interesting overview of my
usecase and workflow. If you want to follow along, first go to github.io and follow
their guide on creating the repo, cloning it locally, writing your first html file,
and then pushing it up.&lt;/p&gt;

&lt;p&gt;Anyways, I went back to the github repo and tried to view my website. Nothing
but a mono plain text “hello, world!”, which while riveting, doesn’t exactly
fulfill my original vision. I pulled the repo to my new desktop
(I’ve switched to KDE Manjaro after a little bit too much time on &lt;a href=&quot;https://reddit.com/r/unixporn/&quot;&gt;r/unixporn&lt;/a&gt;)
and set out to install Jekyll. Here’s the series of commands I used, keeping in mind
that Manjaro is an Arch-based distro:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Install a full ruby environment&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pacman &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; ruby base-devel

&lt;span class=&quot;c&quot;&gt;# Install ruby gems to ~/gems by adding lines to our .bashrc&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'# Install Ruby Gems to ~/gems'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;  ~/.bashrc
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'export GEM_HOME=&quot;$HOME/gems&quot; &amp;gt;&amp;gt; ~/.bashrc
echo export PATH=&quot;$HOME/gems/bin:$PATH&quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.bashrc

&lt;span class=&quot;c&quot;&gt;# source our .bashrc so the gems are properly set up in the PATH&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/.bashrc

&lt;span class=&quot;c&quot;&gt;# Now we get to install Jekyll (and bundler!)&lt;/span&gt;
gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;jekyll bundler&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I’ve found that when I forget to add those lines to .bashrc and source it,
I get an error like: “WARNING: You don’t have /home/tylerb/.gem/ruby/2.7.0/bin in your
PATH, gem executables will not run”, which, as you might imagine, means that
the gem executables won’t run and we can’t install and use jekyll and bundler.
I fix that by running&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/home/tylerb/.gem/ruby/2.7.0/bin:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Obviously, change my directory path to whatever yours is in the error message. I
ended up adding this to my .bashrc at a later date when the error persisted
following reboots.&lt;/p&gt;

&lt;p&gt;Bundler is a Ruby package manager which tracks and installs the gems necessary to
do your work. It wraps our Jekyll functions and makes sure Ruby is set up behind
the scenes. If you want more in-depth information on all of this, check out
the official documentation on &lt;a href=&quot;https://jekyllrb.com/docs/&quot;&gt;jekyll doc&lt;/a&gt; and &lt;a href=&quot;https://help.github.com/en/github/working-with-github-pages/setting-up-a-github-pages-site-with-jekyll&quot;&gt;github.io doc&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After that’s all set up, we type into the command line:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# build your site!&lt;/span&gt;
bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll build
bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll serve&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will host your website from the command line on your computer. Look
at the output to see something like “Server address: http://127.0.0.1:4000/”.
Type that into your web browser, and you’ll see your local build!&lt;/p&gt;

&lt;p&gt;Alternatively, go to &lt;a href=&quot;http://localhost:4000]&quot;&gt;http://localhost:4000&lt;/a&gt;, which always works.&lt;/p&gt;

&lt;p&gt;Building your website locally like this is the best way to test it and write your posts.
Changes pushed to your github repo will take some time to appear on the live version.&lt;/p&gt;

&lt;p&gt;So, a bit more on my workflow. I use &lt;a href=&quot;https://wiki.archlinux.org/index.php/Yakuake&quot;&gt;Yakuake&lt;/a&gt; and &lt;a href=&quot;https://github.com/tmux/tmux&quot;&gt;tmux&lt;/a&gt; for anything
command-line-intensive. I really like writing in &lt;a href=&quot;https://www.vim/org&quot;&gt;Vim&lt;/a&gt;, if only because it scratches
that little-kid itch to feel like a hacker. Here’s a screenshot of me editing this document:
&lt;img src=&quot;/assets/Screenshot_20200425_151631.png&quot; alt=&quot;Yakuake Setup&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The top right is where the local build is running from. Below it is the default
‘Welcome to Jekyll!’ post created when we built the website. I keep
this open for reference on adding code blocks and stuff like that. To the top left is my
Vim window where I’m writing the post, and below that is an extra spot to run
commands (I’m running ytop here to keep an eye on system resources). I use the 
&lt;a href=&quot;https://draculatheme.com/&quot;&gt;Dracula&lt;/a&gt; theme for my KDE, tmux, and vim setups, which is where
the colors and HUD along the bottom bar come from. In the future, I’ll make a 
post about my .vimrc, .bashrc, and .tmux.conf files.&lt;/p&gt;

&lt;p&gt;It’s also worth mentioning that I use &lt;a href=&quot;https://starship.rs/&quot;&gt;Starship&lt;/a&gt; as my shell prompt. Again,
for another post.&lt;/p&gt;

&lt;p&gt;The generic Jekyll post outlines how to create a post. I did:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;repo_directory_here/_posts
vim YEAR-MONTH-DAY-title.markdown&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To create a new blog post in markdown. It’s important to have the date right
and title the document exactly like this so Jekyll recognizes it! Add your front matter
and type your post. here’s a direct link to this post’s markdown for the interested:
&lt;a href=&quot;/assets/2020-04-25-my-jekyll-setup.txt&quot;&gt;markdown document&lt;/a&gt;
The front matter is commented out to prevent Jekyll from processing it and
turning it into html so it’s more readable for you.&lt;/p&gt;

&lt;p&gt;I follow the Jekyll documentation advice and add YAML front matter to every
document, which looks something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot; data-lang=&quot;markdown&quot;&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# front matter goes here!&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;gh&quot;&gt;# the document goes here!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I also put things like images, document links, and datasets into an /assets/
folder in the main directory. Then I can link to anything and be sure it’s
accessible via the online github repo without worrying about links breaking or
assets disappearing. As long as the site is being hosted, all those things in
the /assets/ folder should stay there.&lt;/p&gt;

&lt;p&gt;Whenever I’m done writing a post, I push the changes up to my repo with some
variation of the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# pushing up changes&lt;/span&gt;
git add &lt;span class=&quot;nt&quot;&gt;--all&lt;/span&gt;
git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'a meaningful commit message'&lt;/span&gt;
git push&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Keep in mind that all has to be done from the directory of your local branch.
For the non-git initiated, I’ll recommend the documentation at &lt;a href=&quot;https://git-scm.com/docs&quot;&gt;git-scm&lt;/a&gt;.
There’s a nice cheat sheet at the top that explains the basic commands, and
it should be more than fine for any solo github project.&lt;/p&gt;

&lt;p&gt;This is about the extent of my workflow for now. In the future if I decide to
get more fancy with it, I’ll write an update to this post and fill you in. For
now, I’m enjoying how quick and easy it is to write in markdown, and the themes
in jekyll suit me nicely enough to not bother messing around with html and css
files all day. My next planned post will describe some more of my KDE
customizations, theming, and workflow: stay tuned for that!&lt;/p&gt;</content><author><name>Tyler Burleyson</name><email>tjb152@case.edu</email></author></entry></feed>